import{_ as t,o,c as a,a as e}from"./app-zHmibev2.js";const i={},l=e('<h1 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h1><h2 id="_3种-特征fn特征" tabindex="-1"><a class="header-anchor" href="#_3种-特征fn特征" aria-hidden="true">#</a> 3种 特征fn特征</h2><ol><li>FnOnce</li></ol><blockquote><p>FnOnce是一个特殊的trait，它表示该闭包或函数只能被调用一次。这是因为在闭包中捕获了环境中的变量时，这些变量的所有权可能会被移动到闭包中。当闭包被调用时，它会&quot;消费&quot;这些变量的所有权。因此，一旦被调用过，就不能再次调用同一个闭包实例。 如果闭包或函数实现了Copytrait，那么它们在被调用时就会被隐式复制，这样就可以多次调用同一个实例。</p><p>补充</p><ul><li>对于像i32、f64这样的基本数据类型,它们自动实现了Copy trait,因为复制这些类型是一个很廉价的操作,不会带来所有权转移或资源释放的问题。</li><li>对于自定义的结构体或枚举,如果它们的所有字段都实现了Copy trait,那么它们就会自动获得Copy trait实现。但如果其中任何一个字段没有实现Copy,那么整个类型就无法实现Copy。</li><li>对于闭包,如果闭包没有捕获任何环境变量,那么它会自动获得Copy trait实现。但如果捕获了环境变量,就取决于这些变量的类型是否实现了Copy。如果实现了,那么闭包可以实现Copy,否则闭包就无法实现Copy。</li></ul></blockquote><ol start="2"><li>FnMut</li></ol>',5),r=[l];function n(c,s){return o(),a("div",null,r)}const _=t(i,[["render",n],["__file","RUST-bibao.html.vue"]]);export{_ as default};
